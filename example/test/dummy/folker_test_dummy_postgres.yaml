name: Postgres Test
description: Dummy Test for Postgres Stage
tags:
  - dummy
  - postgres

stages:
  - name: setup
    action:
      type: VOID
    save:
      host: postgres-server
      port: 5432
      user: postgres
      password: docker
      database: postgres

  - name: create table
    action:
      type: POSTGRES
      method: CREATE
      host: ${host}
      port : ${port}
      user: ${user}
      password: ${password}
      database: ${database}
      sql: >
        CREATE TABLE person (
            ID      INT     PRIMARY KEY     NOT NULL,
            name    TEXT                    NOT NULL,
            surname TEXT                    NOT NULL
        );
    assert:
      - ${elapsed_time} > 0

  - name: insert values
    action:
      type: POSTGRES
      method: INSERT
      host: ${host}
      port : ${port}
      user: ${user}
      password: ${password}
      database: ${database}
      sql: >
        INSERT INTO person ( ID, name, surname ) VALUES
          ( 1, 'Aaaa', 'Bbbb' ),
          ( 2, 'Bbbb', 'Cccc' )
        ;
    assert:
      - ${elapsed_time} > 0

  - name: select values
    action:
      type: POSTGRES
      method: SELECT
      host: ${host}
      port : ${port}
      user: ${user}
      password: ${password}
      database: ${database}
      sql: >
        SELECT * FROM person;
    log:
      - ${result}
    assert:
      - ${elapsed_time} > 0
      - len(${result}) == 2
      - ${result}[0]['id'] == 1
      - ${result}[0]['name'] == 'Aaaa'
      - ${result}[0]['surname'] == 'Bbbb'
      - ${result}[1]['id'] == 2
      - ${result}[1]['name'] == 'Bbbb'
      - ${result}[1]['surname'] == 'Cccc'

  - name: select count
    action:
      type: POSTGRES
      method: SELECT
      host: ${host}
      port: ${port}
      user: ${user}
      password: ${password}
      database: ${database}
      sql: >
        SELECT COUNT(*) FROM person;
    log:
      - ${result}
    assert:
      - ${elapsed_time} > 0
      - ${result}[0]['count'] == 2

  - name: update entry
    action:
      type: POSTGRES
      method: UPDATE
      host: ${host}
      port: ${port}
      user: ${user}
      password: ${password}
      database: ${database}
      sql: >
        UPDATE person
        SET name = 'Bbbb2'
        WHERE ID = 2;
    assert:
      - ${elapsed_time} > 0

  - name: select values
    action:
      type: POSTGRES
      method: SELECT
      host: ${host}
      port : ${port}
      user: ${user}
      password: ${password}
      database: ${database}
      sql: >
        SELECT * FROM person;
    log:
      - ${result}
    assert:
      - ${elapsed_time} > 0
      - len(${result}) == 2
      - ${result}[0]['id'] == 1
      - ${result}[0]['name'] == 'Aaaa'
      - ${result}[0]['surname'] == 'Bbbb'
      - ${result}[1]['id'] == 2
      - ${result}[1]['name'] == 'Bbbb2'
      - ${result}[1]['surname'] == 'Cccc'

  - name: delete entry
    action:
      type: POSTGRES
      method: DELETE
      host: ${host}
      port: ${port}
      user: ${user}
      password: ${password}
      database: ${database}
      sql: >
        DELETE FROM person where ID = 2;
    assert:
      - ${elapsed_time} > 0

  - name: select count
    action:
      type: POSTGRES
      method: SELECT
      host: ${host}
      port: ${port}
      user: ${user}
      password: ${password}
      database: ${database}
      sql: >
        SELECT COUNT(*) FROM person;
    log:
      - ${result}
    assert:
      - ${elapsed_time} > 0
      - ${result}[0]['count'] == 1

  - name: select values
    action:
      type: POSTGRES
      method: SELECT
      host: ${host}
      port : ${port}
      user: ${user}
      password: ${password}
      database: ${database}
      sql: >
        SELECT * FROM person;
    log:
      - ${result}
    assert:
      - ${elapsed_time} > 0
      - len(${result}) == 1
      - ${result}[0]['id'] == 1
      - ${result}[0]['name'] == 'Aaaa'
      - ${result}[0]['surname'] == 'Bbbb'

  - name: drop table
    action:
      type: POSTGRES
      method: DROP
      host: ${host}
      port: ${port}
      user: ${user}
      password: ${password}
      database: ${database}
      sql: >
        DROP TABLE person;
    assert:
      - ${elapsed_time} > 0